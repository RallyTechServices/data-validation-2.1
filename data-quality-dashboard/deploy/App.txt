<!DOCTYPE html>
<html>
<head>
    <title>Data Quality Dashboard</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Thu Nov 10 2016 10:19:05 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Nov 10 2016 10:19:05 GMT-0700 (MST)";
        var BUILDER = "kcorkan";
        var CHECKSUM = 13389499258;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
Ext.define('CA.techservices.validation.BaseRule',{
    extend: 'Ext.Base',
    alias:  'widget.tsrule_base',
    /*
     * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
     * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
     */
    portfolioItemTypes:[],
    /**
     *
     * @cfg
     * {String} model The name of a record type that this rule applies to
     */
    model: null,
    /**
     *
     * @cfg {String} a human-readable label for the chart that will be made from the rule
     */
    label: 'No label supplied for this rule',

    description: 'This is a description for the base rule',

    query: null,

    constructor: function(config) {
        Ext.apply(this,config);
    },
    getFeatureName: function(){
        return this.portfolioItemTypes && this.portfolioItemTypes.length > 1 &&
            this.portfolioItemTypes[0].TypePath.replace('PortfolioItem/','');
    },
    getDescription: function() {
        return this.description;
    },
    getFetchFields: function() {
        return ['FormattedID'];
    },
    getLabel: function() {
        return this.label;
    },
    getModel: function() {
        return this.model;
    },
    getCountConfig: function(){
        return {
            model: this.getModel(),
            fetch: this.getFetchFields(),
            filters: this.getFilters()
        };
    },
    getTotalCountConfig: function(){
        return {
            model: this.getModel(),
            fetch: ['ObjectID'],
            filters: this.getBaseFilters()
        };
    },
    getBaseFilters: function(){
        return Ext.create('Rally.data.wsapi.Filter', {
            property:'ObjectID',
            operator:'>',
            value: 0
        });
    },
    getFilters: function() {
        if (this.query){
            return Rally.data.wsapi.Filter.fromQueryString(this.query);
        }
        return Ext.create('Rally.data.wsapi.Filter', {
            property:'ObjectID',
            operator:'>',
            value: 0
        });
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CA.technicalservices.validation.RuleTemplate', {
    extend: 'Ext.XTemplate',

    /**
     * This template expects a set of rules objects in the following format:
     * {
     *   bucket: <Project Name Bucket>
     *   rules: [{
     *      label: <Short rule Label>,
     *      description: <Rule description>,
     *      flaggedCount: <Count of flagged records>,
     *      totalCount: <Count of total records>,
     *      unitLabel: <plural unit label:  e.g. stories, people>
     *   }...]
     * }
     */

    constructor: function() {

        this.callParent([
            '<div class="dashboard-header">Financial Reporting Risks - {bucket}</div>',
            '<table class="dashboard-table"><tr></tr>',
            '<tpl for="rules">',
                '<tpl if="this.isRowBreak(xindex)"></tr><tr></tpl>',
                '<td class="dashboard-box">',
                    '<div class="{[this.getTitleClass(values)]}">{label}</div>',
                    '<div class="dashboard-percent-title">{[this.getPercentString(values)]}</div>',
                    '<div class="dashboard-subtitle">{flaggedCount} {unitLabel} out of {totalCount}</div>',
                    '<div class="dashboard-description">{description}</div>',
                '</td>',
            '</tpl>',
            '</tr></table>',
            {
                columns: 4,
                getPercentString: function(values){
                    var percent = this.getPercent(values);
                    if (percent === null){
                        return 'N/A';
                    }
                    return Ext.String.format('{0}%', percent.toFixed(1));
                },
                getPercent: function(values) {
                    return values.totalCount > 0 ? (values.flaggedCount / values.totalCount * 100) : null;
                },
                isRowBreak: function(col){
                    console.log('isRowBreak', col % this.columns);
                    if (col > this.columns && col % (this.columns + 1) === 0){
                        return true;
                    }
                    return false;
                },
                getTitleClass: function(values){
                    var percent = this.getPercent(values);
                    console.log('percent')
                    if (percent === null){
                        return 'dashboard-top dashboard-gray';
                    }

                    if (percent < 10){
                        return 'dashboard-top dashboard-green';
                    }
                    if (percent < 20){
                        return 'dashboard-top dashboard-yellow';
                    }
                    return 'dashboard-top dashboard-red';
                }
            }
        ]);
    }
});
Ext.define('CA.technicalservices.validator.Validator',{
    alias: 'widget.tsvalidator',

    logger: new Rally.technicalservices.Logger(),
    /**
     *
     * [{rule}] An array of validation rules
     */
    rules: [],

    constructor: function(config) {
        Ext.apply(this,config);

        var rules = [];

        Ext.Array.each(this.rules, function(rule){
            var name = rule.xtype || 'tsrule_base';
            if ( !Ext.isEmpty(name) ) {
                delete rule.xtype;
                rules.push(Ext.createByAlias('widget.' + name, rule));
            }
        });
        this.logger.log('Validator.constructor', this.rules);
        this.rules = rules;
    },
    run: function(){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('run', this.rules);
        var promises = [],
            me = this;
        Ext.Array.each(this.rules, function(rule){
            promises.push(me.updateRule(rule));
        });

        Deft.Promise.all(promises).then({
            success: function(){
                deferred.resolve(this);
            },
            failure: function(msg){
                deferred.reject(msg);
            },
            scope: this
        });

        return deferred;
    },
    updateRule: function(rule){
        var deferred = Ext.create('Deft.Deferred');

        this.logger.log('updateRule', rule.model);
        this.getTotalCount(rule.model).then({
            success: function(totalCount){
                rule.totalCount = totalCount;
                this.logger.log('updateRule.getTotalCount', rule.model, totalCount);
                this._loadWsapiCount(rule.getCountConfig()).then({
                    success: function(count){
                        this.logger.log('updateRule._loadWsapiCount', rule.getLabel(), count);
                        rule.flaggedCount = count;
                        deferred.resolve();
                    },
                    failure: function(msg){
                        deferred.reject(msg);
                    },
                    scope: this
                });
            },
            failure: function(msg){
                deferred.reject(msg);
            },
            scope: this
        });
        return deferred;
    },
    getTotalCount: function(model){
        var deferred = Ext.create('Deft.Deferred');
        if (this.totalCounts && this.totalCounts[model]){
            deferred.resolve(this.totalCounts[model]);
        } else {
            this._loadWsapiCount({
                model: model,
                fetch: ['ObjectID']
            }).then({
                success: function(count){
                    if (!this.totalCounts){
                        this.totalCounts = {};
                    }
                    this.totalCounts[model] = count;
                    deferred.resolve(count);
                },
                failure: function(msg){
                    deferred.reject(msg);
                },
                scope: this
            });
        }
        return deferred;
    },
    getRules: function(){
        return this.rules;
    },
    _loadWsapiRecords: function(config) {
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    var result = {};
                    result[config.model] = records;
                    deferred.resolve(result);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    },
    _loadWsapiCount: function(config){
        var deferred = Ext.create('Deft.Deferred');

        config.pageSize = 1;
        config.limit = 1;

        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    }
});
Ext.define("data-quality-dashboard", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "data-quality-dashboard"
    },

    rules: [{
        label: 'Orphaned Features',
        description: 'Counting only features identified as Build',
        model: 'PortfolioItem/Feature',
        unitLabel: 'features',
        query: '((Parent = null) AND (InvestmentCategory = "Build"))'
    },{
        label: 'Orphaned Stories',
        description: 'Counting stories where:<br><li>Assigned Team a build percent != 0 (is > 0 or null). ' +
        '<li>Story is not in "Unelaborated" ScheduleState ' +
        '<li>Story Type is "Standard" or null' +
        '<li>Story has no Feature',
        unitLabel: 'stories',
        model: 'HierarchicalRequirement',
        query: '(((c_StoryType = "Standard") OR (c_StoryType = "")) AND (((Feature = null) AND (ScheduleState > "Unelaborated")) AND (Project.c_BuildPercent != 0)))'
    },{
        label: 'Stories not sized',
        description: 'Counting stories where:<br><li>Assigned Team a build percent != 0 (is > 0 or null). ' +
        '<li>Parent Initiative has an Investment Category = "Build" ' +
        '<li>Parent Initiative state is "In-Progress" or "Staging" ' +
        '<li>Story schedule state is in "Defined", "In-Progress" or "Complete" ' +
        '<li>Story Plan Estimate is null ',
        unitLabel: 'stories',
        model: 'HierarchicalRequirement',
        query: '((((((Feature.Parent.State.Name = "In-Progress") OR (Feature.Parent.State.Name = "Staging") AND (((ScheduleState = "Defined") OR (ScheduleState = "In-Progress")) OR (ScheduleState = "Completed"))) AND (Feature.Parent.InvestmentCategory = "Build")) AND (Project.c_BuildPercent != 0)) AND (PlanEstimate = ""))'
    },{
        label: 'Active Stories / Inactive Initiatives',
        description: 'Counting stories where:<br><li>Assigned Team a build percent != 0 (is > 0 or null). ' +
        '<li>Parent Initiative has an Investment Category = "Build" ' +
        '<li>Parent Initiative is NOT active (state is NOT "In-Progress" or "Staging") ' +
        '<li>Story is active (schedule state is "Defined", "In-Progress" or "Complete") ' ,
        unitLabel: 'stories',
        model: 'HierarchicalRequirement',
        query: '((((Feature.Parent.State.Name != "In-Progress") AND (Feature.Parent.State.Name != "Staging")) AND (((ScheduleState = "Defined") OR (ScheduleState = "In-Progress")) OR (ScheduleState = "Completed")) AND ((c_StoryType = "Standard") OR (c_StoryType = ""))) AND ((Feature.Parent.InvestmentCategory = "Build") AND (Project.c_BuildPercent != 0)))'
    },{
        label: 'Active Stories on Parent Teams',
        description: 'Counting stories where:<br><li>Assigned Team a build percent != 0 (is > 0 or null). ' +
        '<li>Parent Initiative has an Investment Category = "Build" ' +
        '<li>Parent Initiative is active (state is "In-Progress" or "Staging") ' +
        '<li>Story state is active (state is "Defined", "In-Progress" or "Complete") ' ,
        unitLabel: 'stories',
        model: 'HierarchicalRequirement',
        query: '((((Feature.Parent.State.Name = "In-Progress") OR (Feature.Parent.State.Name = "Staging")) AND (((ScheduleState = "Defined") OR (ScheduleState = "In-Progress")) OR (ScheduleState = "Completed"))) AND (((Feature.Parent.InvestmentCategory = "Build") AND (Project.Children.State = "Open")) AND (Project.c_BuildPercent != 0)))'
    },{
        label: 'Strategy Category',
        description: 'Counting initiatives where:<br>' +
        '<li>Initiative has an Investment Category = "Build" ' +
        '<li>Strategy Category is null',
        unitLabel: 'initiatives',
        model: 'PortfolioItem/Initiative',
        query: '((InvestmentCategory = "Build") AND (c_StrategyCategory = ""))'
    }, {
        label: 'Active Stories / Team with no people',
        description: 'Counting stories where:<br>' +
        '<li>Initiative has an Investment Category = "Build" ' +
        '<li>Initiative is active (state is "In-Progress" or "Staging") ' +
        '<li>Story state is active (state is "Defined", "In-Progress" or "Complete") ' +
        '<li>Story is on a Team with no Team Members</li>',
        unitLabel: 'stories',
        model: 'HierarchicalRequirement',
        query: '((((Feature.Parent.State.Name = "In-Progress") OR (Feature.Parent.State.Name = "Staging")) AND (((ScheduleState = "Defined") OR (ScheduleState = "In-Progress")) OR (ScheduleState = "Completed"))) AND ((Feature.Parent.InvestmentCategory = "Build") AND (Project.TeamMembers.ObjectID = "null")))'
    },{
        label: 'Features not sized',
        description: 'Counting features where:' +
        '<li>Initiative is Build' +
        '<li>Initiative is active (state is "In-Progress" or "Staging")' +
        '<li>Preliminary Estimate is null',
        model: 'PortfolioItem/Feature',
        unitLabel: 'features',
        query: '((((Parent.State.Name = "In-Progress") OR (Parent.State.Name = "Staging")) AND (Parent.InvestmentCategory = "Build")) AND (PreliminaryEstimate = ""))'
    }],

//misaligned features/intiiative investment category
    //(((((Parent.State.Name = "Elaborate") OR (Parent.State.Name = "In-Progress")) OR (Parent.State.Name = "Staging")) AND (Parent.InvestmentCategory = "Build")) AND (InvestmentCategory != "Build"))

    launch: function() {
        this.validator = this.createValidator()
        //this.displayDashboard(this.validator);
    },
    createValidator: function(){
        //var validator = {
        //    bucket: 'Bucket',
        //    rules: [{
        //        label: 'this is a label',
        //        description: 'this is a description',
        //        unitLabel: 'stories',
        //        flaggedCount: 5,
        //        totalCount: 54
        //    },{
        //        label: 'this is a label',
        //        description: 'this is a description',
        //        unitLabel: 'stories',
        //        flaggedCount: 3,
        //        totalCount: 54
        //    },{
        //        label: 'this is a label',
        //        description: 'this is a description',
        //        unitLabel: 'stories',
        //        flaggedCount: 2,
        //        totalCount: 54
        //    }]
        //};
        //return validator;

        var validator = Ext.create('CA.technicalservices.validator.Validator',{
            bucket: this.getContext().getProject().Name,
            projectRef: this.getContext().getProject()._ref,
            rules: this.rules
        });

        validator.run().then({
            failure: this.showErrorNotification,
            success: this.displayDashboard,
            scope: this
        });
    },
    displayDashboard: function(validator){
        this.removeAll();
        var tpl = Ext.create('CA.technicalservices.validation.RuleTemplate');

        this.add({
            xtype: 'container',
            tpl: tpl,
            margin: '0 100 0 100',
            flex: 1
        }).update(validator);
    },
    showErrorNotification: function(msg){
        this.logger.log('showErrorNotification', msg);
        Rally.ui.notify.Notifier.showError({
            message: msg
        });
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('data-quality-dashboard', {
                   name: 'Data Quality Dashboard'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.dashboard-title {
    width: 100%;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 14px;
    padding: 5px;
    text-align: center;
}
.dashboard-percent-title {
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 16px;
    text-align: center;
    vertical-align: middle;
    padding: 15px 10px 10px 10px;
}
.dashboard-subtitle{
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 11px;
    text-align: center;
    padding: 10px;
}
.dashboard-header{
    color: #222222;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 14px;
    padding: 10px;
    text-align: left;
}
.dashboard-description {
    text-align: left;
    padding: 15px;
    color: #888888;
    font-family: ProximaNova, Helvetica, Arial;
    font-size: 11px;
}
.dashboard-box{
    border-width: 1px;
    border-color: #000;
    border-style: solid;
    vertical-align: top;
    padding: 0px;
    width: 100%;
}

.dashboard-gray {
    background-color: #f6f6f6;
    color: #888;
}

.dashboard-top {
    height: 75px;
    width: 100%;
    font-family: ProximaNovaSemiBold, Helvetica, Arial;
    font-size: 16px;
    text-align: center;
    padding: 15px 10px 10px 10px;
    vertical-align: middle;
}
.dashboard-red {
    background-color: #F2D3D0;
    color: #B81B10;
}
.dashboard-green {
    background-color: #e3f9e9;
    color: #1E7C00;
}
.dashboard-yellow {
    background-color: #FFEDBF;
    color: #FF8200;
}
.dashboard-table {
    border-collapse: collapse;
    border-color: grey;
    width: 100%;
    table-layout: fixed;
}
    </style>

</head>
<body></body>
</html>