<!DOCTYPE html>
<html>
<head>
    <title>Data Hygiene App</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Mon Nov 21 2016 11:47:52 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Nov 21 2016 11:47:52 GMT-0700 (MST)";
        var BUILDER = "kcorkan";
        var CHECKSUM = 139824800926;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

/**
 * Created by kcorkan on 11/4/16.
 */
Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },

    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),

    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },

    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);

        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);

            window.BlobBuilder = window.BlobBuilder ||
                window.WebKitBlobBuilder ||
                window.MozBlobBuilder ||
                window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){

        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');

        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID );
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });

        var columns = grid.columns;

        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },

    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();

        console.log('getCSVFromRows');

        var model = grid.model;

        var csv = [];

        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');

        Ext.Array.each(rows,function(row){

            csv.push( me._getCSVFromRecord(Ext.create('recordHolder', { data:row}), grid, store) );
        });

        csv = csv.join('\r\n');
        return csv;
    },

    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");

        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }

        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },

    _getHeadersFromGrid: function(grid) {
        var headers = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.hidden ) { return; }

            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });

        return headers;
    },

    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });

        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer,
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));

        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }

        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },

    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);

        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };

        var node_values = [];
        var columns = grid.columns;

        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }

            if ( column.hidden ) {
                return;
            }

            if (column.dataIndex) {
                var column_name = column.dataIndex;

                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);

        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });

        return csv_string;
    }

});
Ext.define('CA.technicalservices.Toolbox', {
    singleton: true,

    fetchPortfolioItemTypes: function(){
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store',{
            model: 'typedefinition',
            fetch:['TypePath','Ordinal','Name'],
            filters: [{property:'TypePath',operator:'contains',value:'PortfolioItem/'}],
            sorters: [{property:'Ordinal',direction:'ASC'}]
        }).load({
            callback: function(records,operation){
                if (operation.wasSuccessful()){
                    var portfolioItemArray = [];
                    Ext.Array.each(records,function(rec){
                        portfolioItemArray.push(rec.getData());
                    });
                    deferred.resolve(portfolioItemArray);
                } else {
                    var message = 'failed to load Portfolio Item Types ' + (operation.error && operation.error.errors.join(','));
                    deferred.reject(message);
                }
            }
        });
        return deferred.promise;
    },
    fetchPortfolioItemStates: function(){
        var deferred = Ext.create('Deft.Deferred');
        console.log('fetchPortfolioItemStates');
        Ext.create('Rally.data.wsapi.Store',{
            model: 'State',
            fetch:['TypeDef','TypePath','OrderIndex','Name'],
            filters: [{property:'Enabled',value: true}],
            sorters: [{property:'OrderIndex',direction:'ASC'}]
        }).load({
            callback: function(records,operation){
                if (operation.wasSuccessful()){
                    console.log('states', records);
                    var stateHash = {};
                    Ext.Array.each(records, function(r){
                        if (/^PortfolioItem/.test(r.get('TypeDef') && r.get('TypeDef').TypePath)){
                            if (!stateHash[r.get('TypeDef').TypePath]){
                                stateHash[r.get('TypeDef').TypePath] = [];
                            }
                            stateHash[r.get('TypeDef').TypePath].push(r.get('Name'));
                        }
                    });
                    deferred.resolve(stateHash);
                } else {
                    var message = 'failed to load Portfolio Item Types ' + (operation.error && operation.error.errors.join(','));
                    deferred.reject(message);
                }
            }
        });

        return deferred.promise;
    },
    fetchScheduleStates: function(){
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            type: 'UserStory',
            success: function(model) {
                model.getField('ScheduleState').getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        var states = [];
                        Ext.Array.each(records, function(allowedValue) {
                            states.push(allowedValue.get('StringValue'));
                        });
                        deferred.resolve(states);
                    }
                });
            }
        });
        return deferred.promise;
    }
});
Ext.define('CA.techservices.validator.Validator',{
    alias: 'widget.tsvalidator',

    logger: new Rally.technicalservices.Logger(),
    /**
     *
     * [{rule}] An array of validation rules
     */
    rules: [],

    /**
     *
     */
    deliveryTeamProjects: [],       // listing of projects where a SCHEDULED feature might reside

    businessPlanningProjects: [],   // listing of programs where an UNSCHEDULED feature might reside

    recordsByModel: {},

    categoryField: 'Project',

    // fields that all rules should fetch
    fetchFields: [],
    /**
     *
     * a hash containing events for a data point e.g.,
     *
     * points will include a field called _records holding the associated records
     * and each record will have a field called __ruleText holding a statement about
     * its violation
     *
     *     {
     *          click: function() {
     *          me.showDrillDown(this._records,this._name);
     *      }
     */
    pointEvents: null,
    /**
     *
     * a hash of filters by model type.  Filter will be ANDed to the filters we get from the validation rules
     * (which are themselves ORed together).
     */
    baseFilters: {},

    constructor: function(config) {
        Ext.apply(this,config);

        var rules = [],
            rulesByType = {};
        Ext.Array.each(this.rules, function(rule){
            console.log('rule', rule);
            var name = rule.xtype;
            if ( !Ext.isEmpty(name) ) {
                delete rule.xtype;
                var ruleObj = Ext.createByAlias('widget.' + name, rule);
                rulesByType[ruleObj.getModel()] = ruleObj;
                rules.push(ruleObj);
            }
        });
        this.rules = rules;
        this.rulesByType = rulesByType;
    },

    getRuleDescriptions: function() {
        var text = "<ul>";

        Ext.Array.each(this.getRules(), function(rule){
            var rule_description = rule.getDescription() || "";
            if ( !Ext.isEmpty(rule_description) ) {
                text = text + "<li>" + rule_description + "</li>";
            }
        });
        text = text + "</ul>";

        return text;
    },

    getRules: function(){
        return this.rules;
    },
    getRulesByModel: function(){
       return this.rulesByType;
    },
    getFiltersByModel: function() {
        var me = this,
            filters_by_model = {};

        Ext.Array.each(this.getRules(), function(rule){
            var model = rule.getModel();
            var filters = rule.getFilters();

            if ( !Ext.isEmpty(model) && !Ext.isEmpty(filters) ) {
                if ( Ext.isEmpty(filters_by_model[model]) ) {
                    filters_by_model[model] = [];
                }
                console.log('rule', rule, filters);
                filters_by_model[model].push(filters);
            }
        });
        this.logger.log('filters_by_model', filters_by_model);

        Ext.Object.each(filters_by_model, function(model, filters){
            console.log('filters', filters);
            filters = Ext.Array.unique( Ext.Array.flatten(filters) );
            Ext.Array.each(filters, function(filter){
                console.log("filter", filter.toString());
            });
            filters_by_model[model] = Rally.data.wsapi.Filter.or(filters);
            console.log('filters', filters_by_model[model].toString());
            if ( me.baseFilters && !Ext.Object.isEmpty(me.baseFilters) && me.baseFilters[model] && me.baseFilters[model] != {} ) {
                filters_by_model[model] = filters_by_model[model].and(me.baseFilters[model]);
            }
        });
        return filters_by_model;
    },

    getFetchFieldsByModel: function() {
        var me = this,
            fields_by_model = {};

        Ext.Array.each(this.getRules(), function(rule){
            var model = rule.getModel();
            var fields = rule.getFetchFields();
            console.log('fields_by_model', model, fields);

            if ( !Ext.isEmpty(model) && !Ext.isEmpty(fields) && fields.length > 0 ) {
                if ( Ext.isEmpty(fields_by_model[model]) ) {

                    fields_by_model[model] = [me.categoryField,'Name'];
                }
                fields_by_model[model].push(fields);
            }
        });
        console.log('fields_by_model', fields_by_model);
        Ext.Object.each(fields_by_model, function(model, fields){
            fields = Ext.Array.flatten(fields);
            fields = Ext.Array.push(fields, me.fetchFields);

            fields_by_model[model] = Ext.Array.unique(fields);
        });

        return fields_by_model;
    },

    // returns a promise, promise fulfilled by hash of results by model type
    gatherData: function() {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;

        console.log("gatherData:");

        var fetch_by_model = this.getFetchFieldsByModel();
        var filters_by_model = this.getFiltersByModel();

        console.log("gatherData: fetch_by_model",fetch_by_model);

        var promises = [];
        Ext.Object.each(fetch_by_model, function(model, fetch){
            var config = {
                model: model,
                fetch: fetch,
                limit: Infinity,
                filters: filters_by_model[model]
            };

            var promise = function() {
                return this._loadWsapiRecords(config);
            };
            promises.push(promise);
        },this);

        console.log('promises', promises);
        Deft.Chain.sequence(promises,this).then({
            success: function(results) {
                me.recordsByModel = {};
                Ext.Array.each(results, function(result) {
                    me.recordsByModel = Ext.apply(me.recordsByModel, result);
                });
                deferred.resolve(results);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    getChartData: function() {
        if ( this.recordsByModel == {} ) {
            console.log('No search results');
            return {};
        }

        var categories = this.getCategories();
        var series = this.getSeries(categories);

        return { series: series, categories: categories };

    },

    getCategories: function() {
        var me = this,
            records = Ext.Array.flatten(Ext.Object.getValues(this.recordsByModel));

        var category_field = this.categoryField;

        var possible_categories = Ext.Array.map(records, function(record) {
            return me.getCategoryFromRecord(record,category_field);
        });

        return Ext.Array.unique(possible_categories);
    },

    getCategoryFromRecord: function(record,category_field) {
        if ( Ext.isEmpty(record.get(category_field)) ) { return ""; }
        if ( Ext.isString(record.get(category_field)) ) { return record.get(category_field); }
        return record.get(category_field)._refObjectName;
    },

    getSeries: function(categories) {
        var me = this,
            category_field = me.categoryField,
            series = [];

        // one series per rule, one stack per model type
        Ext.Array.each(this.getActiveRules(), function(rule){
            var series_name = rule.getUserFriendlyRuleLabel();
            var model = rule.getModel();
            var records = me.recordsByModel[model];

            var failed_records = me.getFailedRecordsForRule(records, rule);

            var records_by_category = me.getRecordsByCategory(failed_records, categories, category_field);

            var data = [];
            Ext.Array.each(categories, function(category){
                var category_records = records_by_category[category] || [];

                var count = category_records.length;
                var datum = {
                    y: count,
                    _records: category_records,
                    _name: series_name
                };

                if ( !Ext.isEmpty(me.pointEvents) ) {
                    datum.events = me.pointEvents
                }
                data.push(datum);
            });
            series.push({
                name: series_name,

                records: failed_records,
                data: data,
                stack: model
            });
        });

        return series;
    },

    //getFailedRecordsForRule: function(records, rule) {
    //    var failed_records = [];
    //    console.log('getFailedRecordsForRule', records, rule);
    //    Ext.Array.each(records, function(record) {
    //        var failure = rule.applyRuleToRecord(record);
    //        if ( failure ) {
    //            var texts = record.get('__ruleText') || [];
    //            texts.push(failure);
    //            record.set('__ruleText', texts);
    //            failed_records.push(record);
    //        }
    //    });
    //
    //    return failed_records;
    //},
    fetchData: function(){
        var deferred = Ext.create('Deft.Deferred');
        var promises = [],
            projectGroups = this.projectGroups,
            me = this;

        Ext.Array.each(this.rules, function(rule){
           promises.push(me.fetchDataForProjectGroups(rule, projectGroups));
        });

        Deft.Promise.all(promises).then({
            success:function(rows){
                deferred.resolve(rows);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred;
    },
    fetchDataForProjectGroups: function(rule, projectGroups){
        var deferred = Ext.create('Deft.Deferred');
        var promises = [];

        Ext.Array.each(projectGroups, function(p){
            promises.push(rule.apply(p));
        });

        Deft.Promise.all(promises).then({
            success:function(results){
                var idx = 0,
                    hash = {
                        ruleName: rule.getLabel(),
                        type: rule.getModel()
                    };

                Ext.Array.each(projectGroups, function(pg){
                    hash[pg.groupName] = results[idx++];
                });
                deferred.resolve(hash);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    getRecordsByCategory: function(records, categories, category_field) {
        var me = this,
            record_hash = {};

        Ext.Array.each(records, function(record){
            var category = me.getCategoryFromRecord(record,category_field);
            if ( Ext.isEmpty(record_hash[category]) ) {
                record_hash[category] = [];
            }
            record_hash[category].push(record);
        });

        return record_hash;
    },
    getGridData: function(){
        var deferred = Ext.create('Deft.Deferred');
        var promises = [],
            me = this;

        Ext.Array.each(this.projectGroups, function(p){
            promises.push(me.fetchGridRow(p));
        });

        Deft.Promise.all(promises).then({
            success:function(rows){
                deferred.resolve(rows);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred;
    },
    fetchGridRow: function(projectID){
        var deferred = Ext.create('Deft.Deferred'),
            me = this,
            promises = [],
            projectName = this.projectUtility.getProjectName(projectID),
            projectRef= '/project/' + projectID,
            rules = this.getRules();

        Ext.Array.each(rules, function(rule){
            var config = {
                model: rule.getModel(),
                fetch: rule.getFetchFields(),
                filters: rule.getFilters(),
                context: {project: projectRef, projectScopeDown: true}
            };
            console.log('fetchGridRow', config);
            console.log('fetchGridRow', config.filters.toString());
            promises.push(me._loadWsapiCount(config))
        });

        Deft.Promise.all(promises).then({
            success: function(results){
                var row = {
                    bucket: projectName,
                    bucketID: projectID,
                };
                for (var i=0; i < rules.length; i++){
                    var name = rules[i].getLabel();
                    row[name] = {ruleConfig: rules[i].getConfig(),
                        value: results[i] || 0
                    };
                }
                deferred.resolve(row);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred;
    },
    _loadWsapiRecords: function(config) {
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    var result = {};
                    result[config.model] = records;
                    deferred.resolve(result);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    },
    _loadWsapiCount: function(config){
        var deferred = Ext.create('Deft.Deferred');

        config.pageSize = 1;
        config.limit = 1;

        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    }
});
Ext.define('CA.agile.technicalservices.StrategyExecutionGroupSettingsField',{
    extend: 'Ext.form.field.Base',
    alias: 'widget.tsstrategyexecutiongroupsettingsfield',
    fieldSubTpl: '<div id="{id}" class="settings-grid"></div>',

    cls: 'column-settings',

    config: {
        height: 150,
        width: 500,

        /*
         * Name to display at the top of the grid column that shows the execution project
         * (E.g., might want to display this as "Delivery" or "Delivery Teams")
         */
        executionColumnDisplayName: 'Execution',
        /*
         * Name to display at the top of the grid column that shows the strategy project
         */
        strategyColumnDisplayName: 'Strategy',
        /*
         * Name to display at the top of the grid column that shows the user's choice for group name
         */
        groupColumnDisplayName: 'Group Name',

        emptyText: 'No Selections'

    },

    labelAlign: 'top',

    onRender: function() {
        this.callParent(arguments);

        var decoded_value = [],
            data = [];

        if (this.initialConfig && this.initialConfig.value && !_.isEmpty(this.initialConfig.value)){
            if (!Ext.isObject(this.initialConfig.value)){
                decoded_value = Ext.JSON.decode(this.initialConfig.value);
            } else {
                decoded_value = this.initialConfig.value;
            }
        }
        if ( Ext.isArray(decoded_value) ) { data = decoded_value; }

        this._store = Ext.create('Ext.data.Store', {
            fields: ['groupName','strategyProjectName','strategyProjectRef',
                'executionProjectName','executionProjectRef'],
            data: data
        });

        var container_width = this.config.width || 500;
        if ( container_width < 400 ) { container_width = 400; }
        var container_height = this.config.height || 150;
        if ( container_height < 150 ) { container_height = 150; }

        var container = Ext.create('Ext.container.Container',{
            layout: { type:'hbox' },
            renderTo: this.inputEl,
            width: container_width,
            height: container_height,
            margin: 5
        });

        this._createGrid(container);
        this._createButton(container);
        this.fireEvent('ready', true);
    },

    setValue: function(value) {
        this.callParent(arguments);
        this._value = value;
    },
    /**
     * When a form asks for the data this field represents,
     * give it the name of this field and an array of objects representing the groups.
     *
     * Used when persisting the value of this field.
     * @return {Object}
     */
    getSubmitData: function() {
        var data = {};
        data[this.name] = Ext.JSON.encode(this._buildSettingValue());
        return data;
    },

    _createGrid: function(container) {
        var gridWidth = Math.min(container.getWidth(true)-125,400);

        this._grid = container.add({
            xtype:'rallygrid',
            width: gridWidth,
            columnCfgs: this._getColumnCfgs(),
            showPagingToolbar: false,
            showRowActionsColumn: false,
            enableRanking: false,
            store: this._store,
            emptyText: this.emptyText || 'No Selections',
            editingConfig: {
                publishMessages: false
            }
        });
    },

    _createButton: function(container) {

        container.add({
            xtype: 'rallybutton',
            text: 'Add Group',
            margin: '0 0 0 10',
            listeners: {
                scope: this,
                click: function(){
                    var store = this._grid.getStore();
                    Ext.create('CA.agile.technicalservices.StrategyExecutionPickerDialog',{
                        strategyLabel: 'Strategy',
                        executionLabel: 'Execution',
                        groupLabel: 'Group Name',

                        listeners: {
                            scope: this,
                            select: function(dialog,value) {
                                if ( Ext.isEmpty(value) ) { return; }

                                var group_name = value.groupName;
                                var strategy_project = value.strategyProject;
                                var execution_project = value.executionProject;

                                store.add({
                                    groupName: group_name,
                                    strategyProjectName: strategy_project.get('_refObjectName'),
                                    strategyProjectRef: strategy_project.get('_ref'),
                                    executionProjectName: execution_project.get('_refObjectName'),
                                    executionProjectRef: execution_project.get('_ref')
                                });
                            }
                        }
                    });


                }
            }
        });
    },

    _buildSettingValue: function() {
        var mappings = [];
        var store = this._grid.getStore();

        store.each(function(record){
            if ( record.get('strategyProjectRef') ) {
                mappings.push(record.getData());
            }
        });

        return mappings;
    },

    _removeProject: function(){
        this.grid.getStore().remove(this.record);
    },

    _getColumnCfgs: function() {
        var me = this;
        return [{
            xtype: 'rallyrowactioncolumn',
            scope: this,
            rowActionsFn: function(record){
                return  [
                    {text: 'Remove', record: record, handler: me._removeProject, grid: me._grid }
                ];
            }
        },
            {
                dataIndex: 'groupName',
                text: this.groupColumnDisplayName
            },
            {
                dataIndex: 'strategyProjectName',
                text: this.strategyColumnDisplayName,
                flex: 1
            },
            {
                dataIndex: 'executionProjectName',
                text: this.executionColumnDisplayName,
                flex: 1
            }];
    },

    onDestroy: function() {
        if (this._grid) {
            this._grid.destroy();
            delete this._grid;
        }
        this.callParent(arguments);
    }
});
Ext.define('CA.agile.technicalservices.StrategyExecutionPickerDialog',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsstrategyexecutiondialog',

    config: {
        autoShow: true,
        width: 200,
        height: 200,
        closable: false,
        draggable: true,

        title: 'Choose Projects',

        selectionButtonText: 'Done',
        strategyLabel: 'Strategy',
        executionLabel: 'Execution',
        groupLabel: 'Group Name'
    },

    constructor: function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },


    initComponent: function() {
        this.callParent(arguments);

        this.addEvents(
            /**
             * @event select
             * Fires when user clicks the done button after choosing the projects
             * @param {CA.agile.technicalservices.StrategyExecutionPickerDialog} source the dialog
             * @param {Object} the name, strategy project and execution project chosen.  Looks like:
             *   { groupName: {String}, strategyProject: {Rally.data.wsapi.Model}, executionProject: {Rally.data.wsapi.Model} }
             */
            'select'
        );

        this.addCls(['chooserDialog', 'chooser-dialog']);
    },

    beforeRender: function() {
        this.callParent(arguments);

        this.addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    itemId: 'doneButton',
                    text: this.selectionButtonText,
                    cls: 'primary rly-small',
                    scope: this,
                    disabled: true,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        this.fireEvent('select', this, this.getSelectedValues());
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary rly-small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

        if (this.introText) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                html: this.introText
            });
        }

        var container = this.add({
            xtype: 'container',
            itemId: 'selector_box'
        });

        this.addSelectors(container);
    },

    addSelectors: function(container) {
        container.removeAll();

        this.group_name_field = container.add({
            xtype: 'rallytextfield',
            fieldLabel: this.groupLabel,
            labelAlign: 'top',
            margin: 5,
            listeners: {
                scope: this,
                change: this._enableDisableDoneButton
            }
        });

        this.strategy_selector = container.add({
            xtype: 'rallyprojectpicker',
            showMostRecentlyUsedProjects: false,
            workspace: Rally.getApp().getContext().getWorkspaceRef(),
            fieldLabel: this.strategyLabel,
            labelAlign: 'top',
            margin: 5,
            listeners: {
                scope: this,
                change: this._enableDisableDoneButton
            }
        });

        this.execution_selector = container.add({
            xtype: 'rallyprojectpicker',
            showMostRecentlyUsedProjects: false,
            workspace: Rally.getApp().getContext().getWorkspaceRef(),
            fieldLabel: this.executionLabel,
            labelAlign: 'top',
            margin: 5,
            listeners: {
                scope: this,
                change: this._enableDisableDoneButton
            }
        });
    },

    _enableDisableDoneButton: function() {
        var execution_project = this.execution_selector && this.execution_selector.getValue();
        var strategy_project = this.strategy_selector && this.strategy_selector.getValue();
        var group_name = this.group_name_field && this.group_name_field.getValue();

        if ( ! execution_project || ! strategy_project || Ext.isEmpty(group_name)) {
            this._disableDoneButton();
        } else {
            this._enableDoneButton();
        }
    },

    _enableDoneButton: function() {
        this.down('#doneButton').setDisabled(false);
    },

    _disableDoneButton: function() {
        this.down('#doneButton').setDisabled(true);
    },

    getSelectedValues: function() {
        var execution_project = this.execution_selector && this.execution_selector.getSelectedRecord();
        var strategy_project = this.strategy_selector && this.strategy_selector.getSelectedRecord();
        var group_name = this.group_name_field && this.group_name_field.getValue();
        if ( ! execution_project || ! strategy_project || Ext.isEmpty(group_name)) {
            return;
        }

        return {
            groupName: group_name,
            strategyProject: strategy_project,
            executionProject: execution_project
        }
    }
});
Ext.define('CA.techservices.validation.BaseRule',{
    extend: 'Ext.Base',
    /*
     * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
     * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
     */
    portfolioItemTypes:[],
    /**
     *
     * @cfg
     * {String} model The name of a record type that this rule applies to
     */
    model: null,
    /**
     *
     * @cfg {String} a human-readable label for the chart that will be made from the rule
     */
    label: 'No label supplied for this rule',

    constructor: function(config) {
        Ext.apply(this,config);
    },
    getDescription: function() {
        return this.description || this.getLabel();
    },

    getFetchFields: function() {
        return [];
    },
    getLabel: function() {
        //console.error('getLabel is not implemented in subclass ', this.self.getName());
        return this.label;
    },
    getModel: function() {
        return this.model;
    },

    getFilters: function() {
        return Ext.create('Rally.data.wsapi.Filter', {
            property:'ObjectID',
            operator:'>',
            value: 0
        });
    },
    _getFeatureName: function(){
        return "Feature";
        return this.portfolioItemTypes[0].TypePath.replace('PortfolioItem/','');
    },
    getUserFriendlyRuleLabel: function() {
        return this.getLabel();
    },
    apply: function(pg){
        console.log('apply', this.getLabel());
        var deferred = Ext.create('Deft.Deferred'),
            strategyConfig = {
                model: this.getModel(),
                filters: this.getFilters(),
                context: {project: pg.strategyProjectRef}
            },
            executionConfig = {
                model: this.getModel(),
                filters: this.getFilters(),
                context: {project: pg.executionProjectRef}
            };

        Deft.Promise.all([
            this._loadWsapiCount(strategyConfig),
            this._loadWsapiCount(executionConfig)
        ]).then({
            success: function(results){
                deferred.resolve(Ext.Array.sum(results));
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },

    _loadWsapiCount: function(config){
        var deferred = Ext.create('Deft.Deferred');

        config.pageSize = 1;
        config.limit = 1;
        config.fetch = ['ObjectID'];

        console.log('_loadWsapiCount', config);
        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation){
                console.log('_loadWsapiCount callback', records, operation);
                if (operation.wasSuccessful()){
                    deferred.resolve(operation.resultSet.totalRecords);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    },
    _loadWsapiRecords: function(config) {
        var deferred = Ext.create('Deft.Deferred');

        if (!config.pageSize){
            config.pageSize = 2000;
        }
        config.limit = Infinity;
        console.log('_loadWsapiRecords', config);
        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation){
                console.log('_loadWsapiRecords callback', records, operation);
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation.error.errors.join(','));
                }
            }
        });
        return deferred.promise;
    }
});
Ext.define('CA.techservices.validation.PortfolioChildState',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsportfolio_childstate',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        portfolioItemTypes:[],
        targetPortfolioLevel: 1,

        label: '{0} in "No Entry” state with {1}s in "Front Door" state or beyond',
        description: '{0} in "No Entry” state with {1}s in "Front Door" state or beyond'
    },
    getModel:function(){
        return this.portfolioItemTypes[this.targetPortfolioLevel].TypePath;
    },
    getLabel: function(){
        this.label = Ext.String.format(
            this.label,
            /[^\/]*$/.exec(this.getModel()),
            /[^\/]*$/.exec(this.portfolioItemTypes[this.targetPortfolioLevel - 1].Name)
        );
        return this.label;
    },
    getFilters: function(){
        var childFilters = [],
            childStates = this.portfolioItemStates[this.portfolioItemTypes[0].TypePath];
        console.log('state', childStates, this.portfolioItemStates);
        var noEntryState = "No Entry",
            filters = [{
            property: 'State.Name',
            value: noEntryState
        },{
            property: 'State',
            value: ''
        }];
        filters = Rally.data.wsapi.Filter.or(filters);


        Ext.Array.each(childStates, function(state){

            if (state !== noEntryState){
                childFilters.push({
                    property: 'Children.State.Name',
                    value: state
                });
            }
        });
        childFilters = Rally.data.wsapi.Filter.or(childFilters);
        return filters.and(childFilters);
    }
});
Ext.define('CA.techservices.validation.PortfolioFieldValue',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsportfolio_fieldvalue',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        portfolioItemTypes:[],
        targetPortfolioLevel: 0,
        targetField: null,
        targetFieldValue: null,
        label: 'Field Value'
    },
    getModel:function(){
        return this.portfolioItemTypes[this.targetPortfolioLevel].TypePath;
    },
    getLabel: function(){
        var msg = Ext.String.format(
            this.label,
            this.portfolioItemTypes[this.targetPortfolioLevel].Name,
            this.portfolioItemTypes[this.targetPortfolioLevel + 1].Name
        );
        return msg;
    },
    getFilters: function() {
        return Ext.create('Rally.data.wsapi.Filter', {
            property: this.targetField,
            value: this.targetFieldValue
        });
    }
});
Ext.define('CA.techservices.validation.PortfolioOrphan',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsportfolio_orphan',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        portfolioItemTypes:[],
        targetPortfolioLevel: 0,

        label: 'Orphan {0} (no parent {1})'
    },
    getModel:function(){
        return this.portfolioItemTypes[this.targetPortfolioLevel].TypePath;
    },
    getLabel: function(){
        var msg = Ext.String.format(
            this.label,
            this.portfolioItemTypes[this.targetPortfolioLevel].Name,
            this.portfolioItemTypes[this.targetPortfolioLevel + 1].Name
        );
        return msg;
    },
    getFilters: function(){
        return Rally.data.wsapi.Filter.fromQueryString("(Parent = \"\")");
    }
});
Ext.define('CA.techservices.validation.PortfolioProject',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsportfolio_project',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        portfolioItemTypes:[],
        targetPortfolioLevel: 0,
        portfolioProjects: [],
        label: '{0}s with incorrect "Project" field value --> should be "Portfolio" or "Sub-Portfolio"',
        description: '{0}s with incorrect "Project" field value --> should be "Portfolio" or "Sub-Portfolio"'
    },
    getModel:function(){
        return this.portfolioItemTypes[this.targetPortfolioLevel].TypePath;
    },
    getLabel: function(){
        this.label = Ext.String.format(
           this.label,
            /[^\/]*$/.exec(this.portfolioItemTypes[this.targetPortfolioLevel].Name)
        );
        return this.label;
    },
    apply: function(pg){
        console.log('filters to string', this.getFilters().toString());
        var deferred = Ext.create('Deft.Deferred'),
            executionConfig = {
                model: this.getModel(),
                filters: this.getFilters(),
                context: {project: pg.executionProjectRef}
            };

        this._loadWsapiCount(executionConfig).then({
            success: function(count){
                deferred.resolve(count);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    }
});
Ext.define('CA.techservices.validation.PortfolioStateRule',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsportfolio_staterelease',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        portfolioItemTypes:[],
        targetPortfolioLevel: 0,
        executionState: "Execution",

        label: '{0} in "Execution" State missing Release',
        description: '{0} in "Execution" State missing Release'
    },
    getModel:function(){
        return this.portfolioItemTypes[this.targetPortfolioLevel].TypePath;
    },
    getLabel: function(){
        return Ext.String.format(this.label, this.portfolioItemTypes[this.targetPortfolioLevel].Name);
    },
    getFilters: function(){
        var executionState = this.executionState,
            filters = [{
            property: 'State.Name',
            value: executionState
        },{
            property: 'Release',
            value: ""
        }];
        return Rally.data.wsapi.Filter.and(filters);
    }
});
Ext.define('CA.techservices.validation.UserStoryFieldValue',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstory_fieldvalue',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        model: 'HierarchicalRequirement',
        targetField: null,
        targetFieldValue: null,
        label: 'Field Value'
    },

    getFilters: function() {
        return Ext.create('Rally.data.wsapi.Filter', {
            property: this.targetField,
            value: this.targetFieldValue
        });
    }
});
Ext.define('CA.techservices.validation.StoryMismatchedRelease',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstory_mismatchedrelease',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        scheduleStates: null,
        model: 'HierarchicalRequirement',
        label: 'Stories with incorrect "Release" tag (does not match parent {0})',
        description: 'Stories with incorrect "Release" tag (does not match parent {0})'
    },
    getLabel: function(){
        return Ext.String.format(this.label, this.portfolioItemTypes[0].Name);
    },
    apply: function(pg){

        var deferred = Ext.create('Deft.Deferred'),
            featureName = this._getFeatureName(),
            strategyConfig = {
                model: this.getModel(),
                filters: this.getFilters(),
                fetch: ['Release','Name',featureName],
                compact: false,
                context: {project: pg.strategyProjectRef}
            },
            executionConfig = {
                model: this.getModel(),
                filters: this.getFilters(),
                fetch: ['Release','Name',featureName],
                compact: false,
                context: {project: pg.executionProjectRef}
            };

        Deft.Promise.all([
            this._loadWsapiRecords(strategyConfig),
            this._loadWsapiRecords(executionConfig)
        ]).then({
            success: function(results){
                var records = _.flatten(results),
                    count = 0;
                Ext.Array.each(records, function(r){
                    var release = r.get('Release') && r.get('Release').Name || null,
                        featureRelease = r.get(featureName) && r.get(featureName).Release && r.get(featureName).Release.Name || null;
                    if (release != featureRelease){
                        count++;
                    }
                });
                deferred.resolve(count);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    getFilters: function() {
        //var orFilters = Rally.data.wsapi.Filter.or([{
        //    property: 'Release.ObjectID',
        //    operator: '>',
        //    value: 0
        //},{
        //    property: this._getFeatureName() + '.Release.ObjectID',
        //    operator: '>',
        //    value: 0
        //}]);

        var andFilters =  Rally.data.wsapi.Filter.and([{
            property: this._getFeatureName() + '.ObjectID',
            operator: '>',
            value: 0
        },{
            property: 'DirectChildrenCount',
            value: 0
        }]);
        return andFilters; //.and(orFilters);
    }
});
Ext.define('CA.techservices.validation.StoryMissingRelease',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstory_missingrelease',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        scheduleStates: null,
        model: 'HierarchicalRequirement',
        label: 'Stories "in progress" or beyond, with missing "Release" tag',
        description: 'Stories "in progress" or beyond, with missing "Release" tag'
    },
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([{
            property:'ScheduleState',
            operator:'>',
            value: "In-Progress"
        },{
            property:'Release',
            value: ""
        }]);
    }
});
Ext.define('CA.techservices.validation.StoryOrphan',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstory_orphan',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        model: 'HierarchicalRequirement',
        portfolioItemTypes: null,

        label: 'Orphan Stories (no parent {1})'
    },
    getLabel: function(){
        var msg = Ext.String.format(
            this.label,
            this.portfolioItemTypes[0].Name
        );
        return msg;
    },
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([{
            property:'Parent',
            value:""
        },{
            property: 'PortfolioItem',
            value: ""
        }]);
    }
});
Ext.define('CA.techservices.validation.StoryProject',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstory_project',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        portfolioItemTypes:[],
        model: 'HierarchicalRequirement',
        label: 'User Stories with incorrect "Project" field value --> should be "Team"',
        description: 'User Stories with incorrect "Project" field value --> should be "Team"'
    },
    getFetchFields: function() {
        return ['Name','Project'];
    },
    apply: function(pg){

        var deferred = Ext.create('Deft.Deferred'),
            executionConfig = {
                model: this.getModel(),
                filters: this.getFilters(),
                context: {project: pg.strategyProjectRef}
            };

        this._loadWsapiCount(executionConfig).then({
            success: function(count){
                deferred.resolve(count);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    getFilters: function(){
        return Rally.data.wsapi.Filter.fromQueryString("(ObjectID > 0)");
    }
});
Ext.define('CA.techservices.validation.StoryPlanEstimate',{
    extend: 'CA.techservices.validation.BaseRule',
    alias:  'widget.tsstory_planestimate',


    config: {
        /*
         * [{Rally.wsapi.data.Model}] portfolioItemTypes the list of PIs available
         * we're going to use the first level ones (different workspaces name their portfolio item levels differently)
         */
        scheduleStates: null,
        model: 'HierarchicalRequirement',
        label: 'User Stories "in progress" or beyond, without estimates',
        description: 'User Stories "in progress" or beyond, without estimates'
    },
    getFilters: function() {
        return Rally.data.wsapi.Filter.and([{
            property:'ScheduleState',
            operator:'>',
            value: "In-Progress"
        },{
            property:'PlanEstimate',
            value: ""
        }]);
    }
});
Ext.define("data-hygiene", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    integrationHeaders : {
        name : "data-hygiene"
    },

    items: [
        {xtype:'container',itemId:'selector_box', flex: 1, float: 'right'},
        {xtype:'container',itemId:'chart_box', flex: 1},
        {xtype:'container',itemId:'grid_box', flex: 1}
    ],

    config: {
        defaultSettings: {
            portfolioAOPField: 'Ready',
            portfolioCRField: 'Ready',
            userStoryCRField: 'Ready',
            projectGroups: []
        }
    },

    scheduleStates: null,
    portfolioItemTypes: null,
    portfolioItemStates: null,

    launch: function() {
        // get any data model customizations ... then get the data and render the chart
        Deft.Promise.all([
            CA.technicalservices.Toolbox.fetchPortfolioItemTypes(),
            CA.technicalservices.Toolbox.fetchPortfolioItemStates(),
            CA.technicalservices.Toolbox.fetchScheduleStates()
        ]).then({
            success: this._initializeApp,
            failure: this._showErrorMsg,
            scope: this
        });
    },
    _initializeApp: function(results){
        this.logger.log('InitializeApp',results);

        this.portfolioItemTypes = results[0];
        this.portfolioItemStates = results[1];
        this.scheduleStates = results[2];

        this._loadData();
    },
    _showErrorMsg: function(msg){
        this.logger.log('_showErrorMsg', msg);
        Rally.ui.notify.Notifier.showError({message:msg});
    },

    _loadData: function(){
        var me = this;

        this.getExportBox().removeAll();
        this.getChartBox().removeAll();
        this.getGridBox().removeAll();

        this.validator = this._createValidator();
        this.logger.log('_loadData')
        this.validator.fetchData().then({
            success: function(data){
                this.logger.log('_loadData.success', data);
                this._addChart(data);
                this._buildGrids(data);
            },
            failure: this._showErrorMsg,
            scope: this
        }).always(function() { me.setLoading(false); });
    },

    _addChart: function(chartData){
        this.logger.log('addChart', chartData);
        //series: [{
        //    name: ruleName,
        //    data: [49.9, 71.5, 106.4, 129.2, 144.0, 176.0, 135.6, 148.5, 216.4, 194.1, 95.6, 54.4]
        //    stack: type

        var projects = _.map(this.getProjectGroups(), function(pg){
            return pg.groupName;
        });

        var ruleHash = {},
            types = [];

        Ext.Array.each(chartData, function(cd){
            if (!Ext.Array.contains(types, cd.type)){
                types.push(cd.type);
            }
            if (!ruleHash[cd.ruleName]){
                ruleHash[cd.ruleName] = {};
            }
            //if (!ruleHash[cd.ruleName][cd.type]){
            //    ruleHash[cd.ruleName][cd.type] = {};
            //}
            Ext.Array.each(projects, function(p){
                //ruleHash[cd.ruleName][cd.type][p] = cd[p] || 0;
                ruleHash[cd.ruleName][p] = cd[p] || 0;
            });
        });

        this.logger.log('chartData', ruleHash);

        var series = [],
            categories = Ext.Object.getKeys(ruleHash);

        Ext.Array.each(projects, function(p){
          //  Ext.Array.each(types, function(t){
                var values = [];
                Ext.Array.each(categories, function(r){
                    values.push(ruleHash[r] && ruleHash[r][p] || 0);
                });
                series.push({
                    name: p,
                    data: values
                   // stack: t
                });
           // });
        });

        this.logger.log('chartData', series, projects);
        this.getChartBox().add({
            xtype: 'rallychart',
            chartConfig: {
                chart: {
                    type: 'bar',
                    height: 500,
                    marginLeft: Math.max(this.getWidth()/2, 1)
                },
                title: {
                    text: null
                },
                xAxis: {
                    title: {
                        text: null
                    },
                    tickPlacement: 'on'
                },
                yAxis: [
                    {
                        title: {
                            text: 'Artifact Count'
                        }
                    }
                ],
                plotOptions: {
                    bar: {
                        stacking: 'normal'
                    }
                }
            },
            chartData: {
                series: series,
                categories: categories
            }
        });

    },
    export: function(){
        var grids = this.query('rallygrid');
        this.logger.log('export', grids);

        var csv = [];
        var keys = ['type','ruleName'],
            headers = ['Artifact Type', 'Rule'];

        Ext.Array.each(this.getProjectGroups(), function(pg){
            keys.push(pg.groupName);
            headers.push(pg.groupName);
        });

        Ext.Array.each(grids, function(grid){
            var records = grid.getStore() && grid.getStore().getRange();
            if (records && records.length > 0){
                csv.push(Ext.String.format("{0} Data Hygiene", this.getUserFriendlyName(records[0].get('type'))));
                csv.push(headers.join(','));
                Ext.Array.each(records, function(r){
                    var row = Ext.Array.map(keys, function(key){
                        var v = r.get(key) || 0;
                        if (key == 'type'){
                            return this.getUserFriendlyName(v);
                        }


                        if (Ext.isString(v)){
                            return Ext.String.format("\"{0}\"", v.toString().replace(/"/g, "\"\""));
                        }
                        return v;

                    }, this);
                    csv.push(row.join(','));
                }, this);
            }
        }, this);
        csv = csv.join('\r\n');
        this.logger.log('export csv', csv);

        var fileName = Ext.String.format("data-hygiene-{0}.csv",Rally.util.DateTime.format(new Date(), 'Y-m-d-h-i-s'));
        Rally.technicalservices.FileUtilities.saveCSVToFile(csv, fileName);
    },
    addExportButton: function(){

        var btn = this.getExportBox().add({
            xtype: 'rallybutton',
            iconCls: 'icon-export',
            cls: 'secondary rly-small'
        });
        btn.on('click', this.export, this);
    },
    _buildGrids: function(data){

       this.addExportButton();

       var typeHash = {};
        Ext.Array.each(data, function(d){
            if (!typeHash[d.type]){
                typeHash[d.type] = [];
            }
            typeHash[d.type].push(d);
        });
        this.logger.log('_buildGrids', data, typeHash);
        Ext.Object.each(typeHash, function(type, obj){
            this._buildSubGrid(type, obj);
        }, this);

    },
    _buildSubGrid: function(type, data){
        var fields = [];

        if (data && data.length > 0){
            fields = Ext.Object.getKeys(data[0]);
        }
        this.logger.log('_buildSubGrid', data, fields);
        var store = Ext.create('Rally.data.custom.Store',{
            data: data,
            fields: fields
        });

        var columnCfgs = [{
            dataIndex: 'ruleName',
            text: Ext.String.format('{0} level data hygiene', this.getUserFriendlyName(type)),
            flex: 1
        }];

        Ext.Array.each(fields, function(f){
            if (f !== 'type' && f !== 'ruleName') {
                columnCfgs.push({
                    dataIndex: f,
                    text: f,
                    align: 'center'
                });
            }
        });

        this.getGridBox().add({
            xtype: 'rallygrid',
            store: store,
            margin: 20,
            columnCfgs: columnCfgs,
            showPagingToolbar: false,
            showRowActionsColumn: false
        });
    },
    getUserFriendlyName: function(type){
        var name = '';
        if (/PortfolioItem/.test(type)){
            Ext.Array.each(this.portfolioItemTypes, function(p){
                if (p.TypePath === type){
                    name = p.Name;
                    return false;
                }
            });
        }
        if (type === 'HierarchicalRequirement'){
            name = 'User Story';
        }

        return name;
    },
    getPortfolioAOPField: function(){
        return this.getSetting('portfolioAOPField');
    },
    getPortfolioCRField: function(){
        return this.getSetting('portfolioCRField');
    },
    getStoryCRField: function(){
        return this.getSetting('userStoryCRField');
    },
    getProjectGroups: function(){
        var groups = [],
            group_setting = this.getSetting('projectGroups');
        if (!Ext.isArray(group_setting)){
            groups = Ext.JSON.decode(group_setting);
        } else {
            groups = group_setting;
        }
        return groups;
    },
    getGridBox: function(){
        return this.down('#grid_box');
    },
    getChartBox: function(){
        return this.down('#chart_box');
    },
    getExportBox: function(){
        return this.down('#selector_box');
    },
    _createValidator: function() {
        var rules = [{
            xtype:'tsportfolio_orphan',
            targetPortfolioLevel: 1,
            portfolioItemTypes: this.portfolioItemTypes,
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsportfolio_project',
            targetPortfolioLevel: 1,
            portfolioItemTypes: this.portfolioItemTypes,
            portfolioProjects: [],
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsportfolio_childstate',
            targetPortfolioLevel: 1,
            portfolioItemTypes: this.portfolioItemTypes,
            portfolioItemStates: this.portfolioItemStates,
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsportfolio_fieldvalue',
            targetPortfolioLevel: 1,
            portfolioItemTypes: this.portfolioItemTypes,
            targetField: this.getPortfolioAOPField(),
            label: '{0}s with "AOP Approved" field checked',
            description: '{0}s with "AOP Approved" field checked',
            targetFieldValue: true,
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsportfolio_fieldvalue',
            targetPortfolioLevel: 1,
            portfolioItemTypes: this.portfolioItemTypes,
            targetField: this.getPortfolioAOPField(),
            label: '{0}s with "AOP Approved" field <b>not</b> checked',
            description: '{0}s with "AOP Approved" field <b>not</b> checked',
            targetFieldValue: false,
            projectGroups: this.getProjectGroups()
        },{
            xtype:'tsportfolio_orphan',
            targetPortfolioLevel: 0,
            portfolioItemTypes: this.portfolioItemTypes,
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsportfolio_project',
            targetPortfolioLevel: 0,
            portfolioItemTypes: this.portfolioItemTypes,
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsportfolio_fieldvalue',
            targetPortfolioLevel: 0,
            portfolioItemTypes: this.portfolioItemTypes,
            targetField: this.getPortfolioCRField(),
            label: '{0}s with "CR" field checked',
            description: '{0}s with "CR" field checked',
            targetFieldValue: true,
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsportfolio_fieldvalue',
            targetPortfolioLevel: 0,
            portfolioItemTypes: this.portfolioItemTypes,
            targetField: this.getPortfolioCRField(),
            label: '{0}s with "CR" field <b>not</b> checked',
            description: '{0}s with "CR" field <b>not</b> checked',
            targetFieldValue: false,
            projectGroups: this.getProjectGroups()
        },{
            xtype:'tsstory_orphan',
            portfolioItemTypes: this.portfolioItemTypes,
            projectGroups: this.getProjectGroups()
        },{
            xtype:'tsstory_project',
            projectGroups: this.getProjectGroups()
        },{
            xtype:'tsstory_planestimate',
            scheduleStates: this.scheduleStates,
            projectGroups: this.getProjectGroups()
        },{
            xtype:'tsstory_missingrelease',
            scheduleStates: this.scheduleStates,
            projectGroups: this.getProjectGroups()
        },{
            xtype:'tsstory_mismatchedrelease',
            portfolioItemTypes: this.portfolioItemTypes,
            scheduleStates: this.scheduleStates,
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsstory_fieldvalue',
            targetField: this.getStoryCRField(),
            label: 'User Stories with "CR" field checked',
            description: 'User Stories with "CR" field checked',
            targetFieldValue: true,
            projectGroups: this.getProjectGroups()
        },{
            xtype: 'tsstory_fieldvalue',
            targetField: this.getStoryCRField(),
            label: 'User Stories with "CR" field <b>not</b> checked',
            description: 'User Stories with "CR" field <b>not</b> checked',
            targetFieldValue: false,
            projectGroups: this.getProjectGroups()
        }];

        var validator = Ext.create('CA.techservices.validator.Validator',{
                rules: rules,
                projectGroups: this.getProjectGroups()
        });
        return validator;
    },
    getSettingsFields: function(){
        var labelWidth = 150;

        return [{
            xtype: 'rallyfieldcombobox',
            name: 'portfolioAOPField',
            model: 'PortfolioItem',
            fieldLabel: 'Portfolio AOP Approved Field',
            labelAlign: 'right',
            labelWidth: labelWidth,
            _isNotHidden: function(field) {
                return !field.hidden && field.attributeDefinition && field.attributeDefinition.AttributeType === "BOOLEAN";
            }

        },{
            xtype: 'rallyfieldcombobox',
            name: 'portfolioCRField',
            model: 'PortfolioItem',
            fieldLabel: 'Portfolio CR Field',
            labelAlign: 'right',
            labelWidth: labelWidth,
            _isNotHidden: function(field) {
                return !field.hidden && field.attributeDefinition && field.attributeDefinition.AttributeType === "BOOLEAN";
            }
        },{
            xtype: 'rallyfieldcombobox',
            name: 'userStoryCRField',
            model: 'HierarchicalRequirement',
            fieldLabel: 'User Story CR Field',
            labelAlign: 'right',
            labelWidth: labelWidth,
            _isNotHidden: function(field) {
                return !field.hidden && field.attributeDefinition && field.attributeDefinition.AttributeType === "BOOLEAN";
            }
        },{
            name: 'projectGroups',
            xtype:'tsstrategyexecutiongroupsettingsfield'
        }];
    },
     getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }
});

            
               Rally.launchApp('data-hygiene', {
                   name: 'Data Hygiene App'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>